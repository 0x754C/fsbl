/*
 * Copyright (c) 2013-2017, ARM Limited and Contributors. All rights reserved.
 *
 * SPDX-License-Identifier: BSD-3-Clause
 */

#ifndef __CVSP_H__
#define __CVSP_H__

/*
 * SMC function IDs that BMSP uses to signal various forms of completions
 * to the secure payload dispatcher.
 */
#define BMSP_ENTRY_DONE		0xf2000000
#define BMSP_ON_DONE		0xf2000001
#define BMSP_OFF_DONE		0xf2000002
#define BMSP_SUSPEND_DONE	0xf2000003
#define BMSP_RESUME_DONE		0xf2000004
#define BMSP_PREEMPTED		0xf2000005
#define BMSP_ABORT_DONE		0xf2000007
#define BMSP_SYSTEM_OFF_DONE	0xf2000008
#define BMSP_SYSTEM_RESET_DONE	0xf2000009

/*
 * Function identifiers to handle S-EL1 interrupt through the synchronous
 * handling model. If the BMSP was previously interrupted then control has to
 * be returned to the BMSPD after handling the interrupt else execution can
 * remain in the BMSP.
 */
#define BMSP_HANDLED_S_EL1_INTR		0xf2000006

/*
 * Identifiers for various BMSP services. Corresponding function IDs (whether
 * fast or yielding) are generated by macros defined below
 */
#define BMSP_ADD		0x2000
#define BMSP_SUB		0x2001
#define BMSP_MUL		0x2002
#define BMSP_DIV		0x2003
#define BMSP_HANDLE_SEL1_INTR_AND_RETURN	0x2004

/*
 * Identify a BMSP service from function ID filtering the last 16 bits from the
 * SMC function ID
 */
#define BMSP_BARE_FID(fid)	((fid) & 0xffff)

/*
 * Generate function IDs for BMSP services to be used in SMC calls, by
 * appropriately setting bit 31 to differentiate yielding and fast SMC calls
 */
#define BMSP_YIELD_FID(fid)	((BMSP_BARE_FID(fid) | 0x72000000))
#define BMSP_FAST_FID(fid)	((BMSP_BARE_FID(fid) | 0x72000000) | (1u << 31))

/* SMC function ID to request a previously preempted yielding smc */
#define BMSP_FID_RESUME		BMSP_YIELD_FID(0x3000)
/*
 * SMC function ID to request abortion of a previously preempted yielding SMC. A
 * fast SMC is used so that the BMSP abort handler does not have to be
 * reentrant.
 */
#define BMSP_FID_ABORT		BMSP_FAST_FID(0x3001)

/*
 * Total number of function IDs implemented for services offered to NS clients.
 * The function IDs are defined above
 */
#define BMSP_NUM_FID		0x5

/* BMSP implementation version numbers */
#define BMSP_VERSION_MAJOR	0x0 /* Major version */
#define BMSP_VERSION_MINOR	0x1 /* Minor version */

/*
 * Standard Trusted OS Function IDs that fall under Trusted OS call range
 * according to SMC calling convention
 */
#define TOS_CALL_COUNT		0xbf00ff00 /* Number of calls implemented */
#define TOS_UID			0xbf00ff01 /* Implementation UID */
/*				0xbf00ff02 is reserved */
#define TOS_CALL_VERSION	0xbf00ff03 /* Trusted OS Call Version */


#ifndef __ASSEMBLY__

#include <stdint.h>


typedef uint32_t bmsp_vector_isn_t;

typedef struct bmsp_vectors {
	bmsp_vector_isn_t yield_smc_entry;
	bmsp_vector_isn_t fast_smc_entry;
	bmsp_vector_isn_t cpu_on_entry;
	bmsp_vector_isn_t cpu_off_entry;
	bmsp_vector_isn_t cpu_resume_entry;
	bmsp_vector_isn_t cpu_suspend_entry;
	bmsp_vector_isn_t sel1_intr_entry;
	bmsp_vector_isn_t system_off_entry;
	bmsp_vector_isn_t system_reset_entry;
	bmsp_vector_isn_t abort_yield_smc_entry;
} bmsp_vectors_t;


#endif /* __ASSEMBLY__ */

#endif /* __CVSP_H__ */
